from sqlalchemy.ext.asyncio import AsyncSession
from db import SessionLocal
from models import Inventory

async def reserve_item(order_id, item_id, quantity):
    async with SessionLocal() as session:
        try:
            item = await session.get(Inventory, item_id)
            if item and item.stock >= quantity:
                item.stock -= quantity
                await session.commit()
                print(f"‚úÖ –¢–æ–≤–∞—Ä {item_id} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                return True
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {item_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return False
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            return False

async def release_item(order_id, item_id, quantity):
    async with SessionLocal() as session:
        try:
            item = await session.get(Inventory, item_id)
            if item:
                item.stock += quantity
                await session.commit()
                print(f"üîÑ –¢–æ–≤–∞—Ä {item_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ {order_id}")
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞: {e}")
